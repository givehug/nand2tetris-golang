
// Class Bat

// Subroutine constructor new
function Bat.new 0
push constant 5
call Memory.alloc 1
pop pointer 0

// Let statement
push argument 0
pop this 0

// Let statement
push argument 1
pop this 1

// Let statement
push argument 2
pop this 2

// Let statement
push argument 3
pop this 3

// Let statement
push constant 2
pop this 4

// Do statement
push pointer 0
call Bat.show 1
pop temp 0

// Return statement
push pointer 0
return

// Subroutine method dispose
function Bat.dispose 0
push argument 0
pop pointer 0

// Do statement
push pointer 0
call Memory.deAlloc 1
pop temp 0

// Return statement
push constant 0
return

// Subroutine method show
function Bat.show 0
push argument 0
pop pointer 0

// Do statement
push constant 1
neg
call Screen.setColor 1
pop temp 0

// Do statement
push pointer 0
call Bat.draw 1
pop temp 0

// Return statement
push constant 0
return

// Subroutine method hide
function Bat.hide 0
push argument 0
pop pointer 0

// Do statement
push constant 0
call Screen.setColor 1
pop temp 0

// Do statement
push pointer 0
call Bat.draw 1
pop temp 0

// Return statement
push constant 0
return

// Subroutine method draw
function Bat.draw 0
push argument 0
pop pointer 0

// Do statement
push this 0
push this 1
push this 0
push this 2
add
push this 1
push this 3
add
call Screen.drawRectangle 4
pop temp 0

// Return statement
push constant 0
return

// Subroutine method setDirection
function Bat.setDirection 0
push argument 0
pop pointer 0

// Let statement
push argument 1
pop this 4

// Return statement
push constant 0
return

// Subroutine method getLeft
function Bat.getLeft 0
push argument 0
pop pointer 0

// Return statement
push this 0
return

// Subroutine method getRight
function Bat.getRight 0
push argument 0
pop pointer 0

// Return statement
push this 0
push this 2
add
return

// Subroutine method setWidth
function Bat.setWidth 0
push argument 0
pop pointer 0

// Do statement
push pointer 0
call Bat.hide 1
pop temp 0

// Let statement
push argument 1
pop this 2

// Do statement
push pointer 0
call Bat.show 1
pop temp 0

// Return statement
push constant 0
return

// Subroutine method move
function Bat.move 0
push argument 0
pop pointer 0

// If statement
push this 4
push constant 1
eq
not
if-goto Bat.if.1.L1

// Let statement
push this 0
push constant 4
sub
pop this 0

// If statement
push this 0
push constant 0
lt
not
if-goto Bat.if.2.L1

// Let statement
push constant 0
pop this 0
goto Bat.if.2.L2
label Bat.if.2.L1
label Bat.if.2.L2

// Do statement
push constant 0
call Screen.setColor 1
pop temp 0

// Do statement
push this 0
push this 2
add
push constant 1
add
push this 1
push this 0
push this 2
add
push constant 4
add
push this 1
push this 3
add
call Screen.drawRectangle 4
pop temp 0

// Do statement
push constant 1
neg
call Screen.setColor 1
pop temp 0

// Do statement
push this 0
push this 1
push this 0
push constant 3
add
push this 1
push this 3
add
call Screen.drawRectangle 4
pop temp 0
goto Bat.if.1.L2
label Bat.if.1.L1

// Else statement

// Let statement
push this 0
push constant 4
add
pop this 0

// If statement
push this 0
push this 2
add
push constant 511
gt
not
if-goto Bat.if.3.L1

// Let statement
push constant 511
push this 2
sub
pop this 0
goto Bat.if.3.L2
label Bat.if.3.L1
label Bat.if.3.L2

// Do statement
push constant 0
call Screen.setColor 1
pop temp 0

// Do statement
push this 0
push constant 4
sub
push this 1
push this 0
push constant 1
sub
push this 1
push this 3
add
call Screen.drawRectangle 4
pop temp 0

// Do statement
push constant 1
neg
call Screen.setColor 1
pop temp 0

// Do statement
push this 0
push this 2
add
push constant 3
sub
push this 1
push this 0
push this 2
add
push this 1
push this 3
add
call Screen.drawRectangle 4
pop temp 0
label Bat.if.1.L2

// Return statement
push constant 0
return
